% 1st variant: w/o templates

ABC is 1,
parse2(x63in,X),
transform(X^p,P),
printTree(P,S),
transform(copy_of P,PCopyOf),
transform(copy P,PCopy),
P1=element(div,[],[element(b,[],[text('copy-of : ')]),PCopyOf]),
	P2=element(div,[],[element(b,[],[text('copy : ')]),PCopy]),
	P3=element(div,[],[element(b,[],[text('value-of : ')]),text(S)]),
Y=element(top,[],[P1,P2,P3]),
parse2(Z,Y).

% 2nd variant: w/ templates
...
template(P,[P1,P2,P3]):-
	P=element(p,_,_),
	printTree(P,S),
	transform(copy_of P,PCopyOf),
	transform(copy P,PCopy),
	P1=element('DIV',[],[element('B',[],[text('copy-of : ')]),PCopyOf]),
	P2=element('DIV',[],[element('B',[],[text('copy : ')]),PCopy]),
	P3=element('DIV',[],[element('B',[],[text('value-of : ')]),text(S)]).
...

ABC is 1,
parse2(x63in,X),
traverse(X,Res),
Y=element(top,[],Res),
parse2(Z,Y).
